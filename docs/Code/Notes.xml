<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Notes</name>
    </assembly>
    <members>
        <member name="T:Notes.InstallChecker">
            <summary>MainMenu feedback</summary>
        </member>
        <member name="M:Notes.InstallChecker.Startup.Start">
            <summary>the meat and potatoes</summary>
        </member>
        <member name="M:Notes.InstallChecker.CleanupOldVersions">
            <summary>Tries to fix the install if it was installed over the top of a previous version</summary>
        </member>
        <member name="T:Notes.ToolbarManager">
            <summary>
            The global tool bar manager.
            </summary>
        </member>
        <member name="P:Notes.ToolbarManager.ToolbarAvailable">
            <summary>
            Whether the Toolbar Plugin is available.
            </summary>
        </member>
        <member name="P:Notes.ToolbarManager.Instance">
            <summary>
            The global tool bar manager instance.
            </summary>
        </member>
        <member name="T:Notes.IToolbarManager">
            <summary>
            A toolbar manager.
            </summary>
        </member>
        <member name="M:Notes.IToolbarManager.add(System.String,System.String)">
            <summary>
            Adds a new button.
            </summary>
            <remarks>
            To replace an existing button, just add a new button using the old button's namespace and ID.
            Note that the new button will inherit the screen position of the old button.
            </remarks>
            <param name="ns">The new button's namespace. This is usually the plugin's name. Must not include special characters like '.'</param>
            <param name="id">The new button's ID. This ID must be unique across all buttons in the namespace. Must not include special characters like '.'</param>
            <returns>The button created.</returns>
        </member>
        <member name="T:Notes.IButton">
            <summary>
            Represents a clickable button.
            </summary>
        </member>
        <member name="P:Notes.IButton.Text">
            <summary>
            The text displayed on the button. Set to null to hide text.
            </summary>
            <remarks>
            The text can be changed at any time to modify the button's appearance. Note that since this will also
            modify the button's size, this feature should be used sparingly, if at all.
            </remarks>
            <seealso cref="P:Notes.IButton.TexturePath"/>
        </member>
        <member name="P:Notes.IButton.TextColor">
            <summary>
            The color the button text is displayed with. Defaults to Color.white.
            </summary>
            <remarks>
            The text color can be changed at any time to modify the button's appearance.
            </remarks>
        </member>
        <member name="P:Notes.IButton.TexturePath">
            <summary>
            The path of a texture file to display an icon on the button. Set to null to hide icon.
            </summary>
            <remarks>
            <para>
            A texture path on a button will have precedence over text. That is, if both text and texture path
            have been set on a button, the button will show the texture, not the text.
            </para>
            <para>
            The texture size must not exceed 24x24 pixels.
            </para>
            <para>
            The texture path must be relative to the "GameData" directory, and must not specify a file name suffix.
            Valid example: MyAddon/Textures/icon_mybutton
            </para>
            <para>
            The texture path can be changed at any time to modify the button's appearance.
            </para>
            </remarks>
            <seealso cref="P:Notes.IButton.Text"/>
        </member>
        <member name="P:Notes.IButton.ToolTip">
            <summary>
            The button's tool tip text. Set to null if no tool tip is desired.
            </summary>
            <remarks>
            Tool Tip Text Should Always Use Headline Style Like This.
            </remarks>
        </member>
        <member name="P:Notes.IButton.Visible">
            <summary>
            Whether this button is currently visible or not. Can be used in addition to or as a replacement for <see cref="P:Notes.IButton.Visibility"/>.
            </summary>
            <remarks>
            Setting this property to true does not affect the player's ability to hide the button using the configuration.
            Conversely, setting this property to false does not enable the player to show the button using the configuration.
            </remarks>
        </member>
        <member name="P:Notes.IButton.Visibility">
            <summary>
            Determines this button's visibility. Can be used in addition to or as a replacement for <see cref="P:Notes.IButton.Visible"/>.
            </summary>
            <remarks>
            The return value from IVisibility.Visible is subject to the same rules as outlined for
            <see cref="P:Notes.IButton.Visible"/>.
            </remarks>
        </member>
        <member name="P:Notes.IButton.EffectivelyVisible">
            <summary>
            Whether this button is currently effectively visible or not. This is a combination of
            <see cref="P:Notes.IButton.Visible"/> and <see cref="P:Notes.IButton.Visibility"/>.
            </summary>
            <remarks>
            Note that the toolbar is not visible in certain game scenes, for example the loading screens. This property
            does not reflect button invisibility in those scenes. In addition, this property does not reflect the
            player's configuration of the button's visibility.
            </remarks>
        </member>
        <member name="P:Notes.IButton.Enabled">
            <summary>
            Whether this button is currently enabled (clickable) or not. This does not affect the player's ability to
            position the button on their toolbar.
            </summary>
        </member>
        <member name="P:Notes.IButton.Important">
            <summary>
            Whether this button is currently "important." Set to false to return to normal button behaviour.
            </summary>
            <remarks>
            <para>
            This can be used to temporarily force the button to be shown on screen regardless of the toolbar being
            currently in auto-hidden mode. For example, a button that signals the arrival of a private message in
            a chat room could mark itself as "important" as long as the message has not been read.
            </para>
            <para>
            Setting this property does not change the appearance of the button. Use <see cref="P:Notes.IButton.TexturePath"/> to
            change the button's icon.
            </para>
            <para>
            Setting this property to true does not affect the player's ability to hide the button using the
            configuration.
            </para>
            <para>
            This feature should be used only sparingly, if at all, since it forces the button to be displayed on
            screen even when it normally wouldn't.
            </para>
            </remarks>
        </member>
        <member name="P:Notes.IButton.Drawable">
            <summary>
            A drawable that is tied to the current button. This can be anything from a popup menu to
            an informational window. Set to null to hide the drawable.
            </summary>
        </member>
        <member name="E:Notes.IButton.OnClick">
            <summary>
            Event handler that can be registered with to receive "on click" events.
            </summary>
            <example>
            <code>
            IButton button = ...
            button.OnClick += (e) => {
                Debug.Log("button clicked, mouseButton: " + e.MouseButton);
            };
            </code>
            </example>
        </member>
        <member name="E:Notes.IButton.OnMouseEnter">
            <summary>
            Event handler that can be registered with to receive "on mouse enter" events.
            </summary>
            <example>
            <code>
            IButton button = ...
            button.OnMouseEnter += (e) => {
                Debug.Log("mouse entered button");
            };
            </code>
            </example>
        </member>
        <member name="E:Notes.IButton.OnMouseLeave">
            <summary>
            Event handler that can be registered with to receive "on mouse leave" events.
            </summary>
            <example>
            <code>
            IButton button = ...
            button.OnMouseLeave += (e) => {
                Debug.Log("mouse left button");
            };
            </code>
            </example>
        </member>
        <member name="M:Notes.IButton.Destroy">
            <summary>
            Permanently destroys this button so that it is no longer displayed.
            Should be used when a plugin is stopped to remove leftover buttons.
            </summary>
        </member>
        <member name="T:Notes.IDrawable">
            <summary>
            A drawable that is tied to a particular button. This can be anything from a popup menu
            to an informational window.
            </summary>
        </member>
        <member name="M:Notes.IDrawable.Update">
            <summary>
            Update any information. This is called once per frame.
            </summary>
        </member>
        <member name="M:Notes.IDrawable.Draw(UnityEngine.Vector2)">
            <summary>
            Draws GUI widgets for this drawable. This is the equivalent to the OnGUI() message in
            <see cref="T:UnityEngine.MonoBehaviour"/>.
            </summary>
            <remarks>
            The drawable will be positioned near its parent toolbar according to the drawable's current
            width/height.
            </remarks>
            <param name="position">The left/top position of where to draw this drawable.</param>
            <returns>The current width/height of this drawable.</returns>
        </member>
        <member name="T:Notes.ClickEvent">
            <summary>
            Event describing a click on a button.
            </summary>
        </member>
        <member name="F:Notes.ClickEvent.Button">
            <summary>
            The button that has been clicked.
            </summary>
        </member>
        <member name="F:Notes.ClickEvent.MouseButton">
            <summary>
            The mouse button which the button was clicked with.
            </summary>
            <remarks>
            Is 0 for left mouse button, 1 for right mouse button, and 2 for middle mouse button.
            </remarks>
        </member>
        <member name="T:Notes.ClickHandler">
            <summary>
            An event handler that is invoked whenever a button has been clicked.
            </summary>
            <param name="e">An event describing the button click.</param>
        </member>
        <member name="T:Notes.MouseMoveEvent">
            <summary>
            Event describing the mouse pointer moving about a button.
            </summary>
        </member>
        <member name="F:Notes.MouseMoveEvent.button">
            <summary>
            The button in question.
            </summary>
        </member>
        <member name="T:Notes.MouseEnterEvent">
            <summary>
            Event describing the mouse pointer entering a button's area.
            </summary>
        </member>
        <member name="T:Notes.MouseLeaveEvent">
            <summary>
            Event describing the mouse pointer leaving a button's area.
            </summary>
        </member>
        <member name="T:Notes.MouseEnterHandler">
            <summary>
            An event handler that is invoked whenever the mouse pointer enters a button's area.
            </summary>
            <param name="e">An event describing the mouse pointer entering.</param>
        </member>
        <member name="T:Notes.MouseLeaveHandler">
            <summary>
            An event handler that is invoked whenever the mouse pointer leaves a button's area.
            </summary>
            <param name="e">An event describing the mouse pointer leaving.</param>
        </member>
        <member name="T:Notes.IVisibility">
            <summary>
            Determines visibility of a button.
            </summary>
            <seealso cref="P:Notes.IButton.Visibility"/>
        </member>
        <member name="P:Notes.IVisibility.Visible">
            <summary>
            Whether a button is currently visible or not.
            </summary>
            <seealso cref="P:Notes.IButton.Visible"/>
        </member>
        <member name="T:Notes.GameScenesVisibility">
            <summary>
            Determines visibility of a button in relation to the currently running game scene.
            </summary>
            <example>
            <code>
            IButton button = ...
            button.Visibility = new GameScenesVisibility(GameScenes.EDITOR, GameScenes.SPH);
            </code>
            </example>
            <seealso cref="P:Notes.IButton.Visibility"/>
        </member>
        <member name="T:Notes.PopupMenuDrawable">
            <summary>
            A drawable that draws a popup menu.
            </summary>
        </member>
        <member name="E:Notes.PopupMenuDrawable.OnAnyOptionClicked">
            <summary>
            Event handler that can be registered with to receive "any menu option clicked" events.
            </summary>
        </member>
        <member name="M:Notes.PopupMenuDrawable.AddOption(System.String)">
            <summary>
            Adds a new option to the popup menu.
            </summary>
            <param name="text">The text of the option.</param>
            <returns>A button that can be used to register clicks on the menu option.</returns>
        </member>
        <member name="M:Notes.PopupMenuDrawable.AddSeparator">
            <summary>
            Adds a separator to the popup menu.
            </summary>
        </member>
        <member name="M:Notes.PopupMenuDrawable.Destroy">
            <summary>
            Destroys this drawable. This must always be called before disposing of this drawable.
            </summary>
        </member>
    </members>
</doc>
